<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

//Sprite state
sprite_index = spr_player_idle;
image_xscale = 1;
image_speed = 0.3; 

//State of char
max_hp = 100;
hp = 100;
strength = 15;
grounded = false;
ladder = false;
has_jumped = false;
dir = 1; 
attacking = false;
blocking = false;
dying = false;
//Starting speed of char
hsp = 0;
vsp = 0;

//Define Physics &amp; Char Stats
grav = 2;
jumpspeed = 15;
movespeed = 3;
ducked = 0.8;
running = 1.2;

key_down = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HP Management
enemy = instance_place(x,y,obj_enemy_1);
if (enemy &amp;&amp; enemy.attacking &amp;&amp; !blocking ) {
    hp -= enemy.strength;
    if(hp&lt;0) hp = 0;
}

if (hp == 0 || dying){
    if(!dying){
        sprite_index = spr_player_death;
        image_index = 0;
        dying = true;
    }else if (dying &amp;&amp; image_index &gt; image_number - 1) {
        instance_destroy();
        instance_create(50, 300, obj_player);
    }
    exit;
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get the player's input

//Horizontal movement
key_right = keyboard_check(vk_right);
key_left = keyboard_check(vk_left);


//Platforms
key_down = keyboard_check(vk_down);

//Jump
key_jump = keyboard_check_pressed(vk_space);

//Movement modifiers
key_shift = keyboard_check(vk_shift);
key_ctrl = keyboard_check(vk_control);

//Sword
key_z = keyboard_check(ord('Z'));
//Shield
key_x = keyboard_check(ord('X'));

//Nothing
key_up = keyboard_check(vk_up);



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
/******** Horizontal ********/
hsp = 0;
//Check Dir
if (key_left){
    hsp = -movespeed;
    dir = -1;
} else if (key_right){
    hsp = movespeed;
    dir = 1;
}

//Speed modifier
if (key_shift){
    hsp = hsp * running;
    
}else if (key_ctrl){
    hsp = hsp * ducked;
    
}


// Collision
if (place_meeting(x+hsp,y,obj_wall)){
    while(!place_meeting(x+sign(hsp),y,obj_wall)){
        x += sign(hsp);
    } 
    hsp = 0;
}

/******** Horizontal End ********/



/******** Vertical ********/
grounded = false;

//Whilst vsp is not the maxspeed, add gravity
if (vsp &lt; 10) vsp += grav;


//Ladder
if (place_meeting(x,y,obj_ladder) &amp;&amp; key_up){
    ladder = true;
    has_jumped = false;
} 
if (ladder){
    grounded = true;
    vsp = 0;
    if(key_up) {
        vsp = -2;
    }
    if(key_down) {   
        vsp = 2;       
    }
    if (!place_meeting(x,y,obj_ladder)) 
        ladder = false;    
}
//Collision
if (place_meeting(x,y+vsp,obj_wall)){
    while(!place_meeting(x,y+sign(vsp),obj_wall)){
        y += 1;
    }
    vsp = 0;
    if(!ladder) {
        grounded = true; 
        has_jumped = false;
    }
}


//Jump
if (key_jump){
    if(grounded){
        vsp = -jumpspeed; 
        ladder = false;  
    } /*else if(!has_jumped){           
        vsp = -jumpspeed; 
        ladder = false;       
        has_jumped = true;
    }*/
}


/******** Vertical End********/






image_xscale = dir;

/******** Attack *************/
if(key_z &amp;&amp; !attacking){
    sprite_index = spr_player_slash;  
    attacking = true;
    image_speed = 0.5; 
    image_index = 0;

} else if (attacking &amp;&amp; image_index &gt; image_number - 1) {
    attacking = false;    
    image_speed = 0.3; 
}

if(grounded &amp;&amp; attacking){
    hsp = 0; 
}

/******** Attack End *********/

/******** Block *************/
if(key_x){
          
    if (blocking &amp;&amp; image_index &gt; image_number - 1) {
        image_index = image_number - 1;
    } else if (!blocking) {
        sprite_index = spr_player_block;
        image_index = 0;
        image_speed = 0.7;
    }
    
    blocking = true;
    if(grounded){
        hsp = 0; 
    }
} else {
    blocking = false;   
    image_speed = 0.3;  
}


/******** Block End *********/

//Set Sprite
if(hsp != 0 &amp;&amp; !attacking &amp;&amp; !blocking){
    sprite_index = spr_player_walking;
} else if (hsp == 0 &amp;&amp; !attacking &amp;&amp; !blocking){
    sprite_index = spr_player_idle;
}

//Move char
x += hsp;
y += vsp;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
//HP Management
pc = (hp/max_hp)*100;
draw_healthbar(x-35, y-40, x+35, y-35, pc, c_black, c_red, c_lime, 0, false, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
